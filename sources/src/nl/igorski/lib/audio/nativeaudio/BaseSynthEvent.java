/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class BaseSynthEvent extends BaseCacheableAudioEvent {
  private long swigCPtr;

  protected BaseSynthEvent(long cPtr, boolean cMemoryOwn) {
    super(NativeAudioEngineJNI.BaseSynthEvent_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BaseSynthEvent obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NativeAudioEngineJNI.delete_BaseSynthEvent(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public BaseSynthEvent() {
    this(NativeAudioEngineJNI.new_BaseSynthEvent__SWIG_0(), true);
  }

  public BaseSynthEvent(float aFrequency, int aPosition, float aLength, SynthInstrument aInstrument, boolean aAutoCache) {
    this(NativeAudioEngineJNI.new_BaseSynthEvent__SWIG_1(aFrequency, aPosition, aLength, SynthInstrument.getCPtr(aInstrument), aInstrument, aAutoCache), true);
  }

  public BaseSynthEvent(float aFrequency, SynthInstrument aInstrument) {
    this(NativeAudioEngineJNI.new_BaseSynthEvent__SWIG_2(aFrequency, SynthInstrument.getCPtr(aInstrument), aInstrument), true);
  }

  public void setIsSequenced(boolean value) {
    NativeAudioEngineJNI.BaseSynthEvent_isSequenced_set(swigCPtr, this, value);
  }

  public boolean getIsSequenced() {
    return NativeAudioEngineJNI.BaseSynthEvent_isSequenced_get(swigCPtr, this);
  }

  public void setPosition(int value) {
    NativeAudioEngineJNI.BaseSynthEvent_position_set(swigCPtr, this, value);
  }

  public int getPosition() {
    return NativeAudioEngineJNI.BaseSynthEvent_position_get(swigCPtr, this);
  }

  public void setLength(float value) {
    NativeAudioEngineJNI.BaseSynthEvent_length_set(swigCPtr, this, value);
  }

  public float getLength() {
    return NativeAudioEngineJNI.BaseSynthEvent_length_get(swigCPtr, this);
  }

  public ADSR getADSR() {
    long cPtr = NativeAudioEngineJNI.BaseSynthEvent_getADSR(swigCPtr, this);
    return (cPtr == 0) ? null : new ADSR(cPtr, false);
  }

  public float getVolume() {
    return NativeAudioEngineJNI.BaseSynthEvent_getVolume(swigCPtr, this);
  }

  public void setVolume(float aValue) {
    NativeAudioEngineJNI.BaseSynthEvent_setVolume(swigCPtr, this, aValue);
  }

  public float getFrequency() {
    return NativeAudioEngineJNI.BaseSynthEvent_getFrequency(swigCPtr, this);
  }

  public void setFrequency(float aFrequency) {
    NativeAudioEngineJNI.BaseSynthEvent_setFrequency(swigCPtr, this, aFrequency);
  }

  public void invalidateProperties(int aPosition, float aLength, SynthInstrument aInstrument) {
    NativeAudioEngineJNI.BaseSynthEvent_invalidateProperties(swigCPtr, this, aPosition, aLength, SynthInstrument.getCPtr(aInstrument), aInstrument);
  }

  public void calculateBuffers() {
    NativeAudioEngineJNI.BaseSynthEvent_calculateBuffers(swigCPtr, this);
  }

  public void mixBuffer(SWIGTYPE_p_AudioBuffer outputBuffer, int bufferPos, int minBufferPosition, int maxBufferPosition, boolean loopStarted, int loopOffset, boolean useChannelRange) {
    NativeAudioEngineJNI.BaseSynthEvent_mixBuffer(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(outputBuffer), bufferPos, minBufferPosition, maxBufferPosition, loopStarted, loopOffset, useChannelRange);
  }

  public SWIGTYPE_p_AudioBuffer getBuffer() {
    long cPtr = NativeAudioEngineJNI.BaseSynthEvent_getBuffer(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AudioBuffer(cPtr, false);
  }

  public SWIGTYPE_p_AudioBuffer synthesize(int aBufferLength) {
    long cPtr = NativeAudioEngineJNI.BaseSynthEvent_synthesize(swigCPtr, this, aBufferLength);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AudioBuffer(cPtr, false);
  }

  public void cache(boolean doCallback) {
    NativeAudioEngineJNI.BaseSynthEvent_cache(swigCPtr, this, doCallback);
  }

  public void render(SWIGTYPE_p_AudioBuffer outputBuffer) {
    NativeAudioEngineJNI.BaseSynthEvent_render(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(outputBuffer));
  }

  public void unlock() {
    NativeAudioEngineJNI.BaseSynthEvent_unlock(swigCPtr, this);
  }

}
