/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class Phaser extends BaseProcessor {
  private long swigCPtr;

  protected Phaser(long cPtr, boolean cMemoryOwn) {
    super(NativeAudioEngineJNI.Phaser_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Phaser obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NativeAudioEngineJNI.delete_Phaser(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public Phaser(float aRate, float aFeedback, float aDepth, float aMinFreq, float aMaxFreq) {
    this(NativeAudioEngineJNI.new_Phaser(aRate, aFeedback, aDepth, aMinFreq, aMaxFreq), true);
  }

  public void setDepth(float depth) {
    NativeAudioEngineJNI.Phaser_setDepth(swigCPtr, this, depth);
  }

  public float getDepth() {
    return NativeAudioEngineJNI.Phaser_getDepth(swigCPtr, this);
  }

  public void setFeedback(float fb) {
    NativeAudioEngineJNI.Phaser_setFeedback(swigCPtr, this, fb);
  }

  public float getFeedback() {
    return NativeAudioEngineJNI.Phaser_getFeedback(swigCPtr, this);
  }

  public void setRate(float aRate) {
    NativeAudioEngineJNI.Phaser_setRate(swigCPtr, this, aRate);
  }

  public float getRate() {
    return NativeAudioEngineJNI.Phaser_getRate(swigCPtr, this);
  }

  public void setRange(float aMin, float aMax) {
    NativeAudioEngineJNI.Phaser_setRange(swigCPtr, this, aMin, aMax);
  }

  public void process(SWIGTYPE_p_AudioBuffer sampleBuffer, boolean isMonoSource) {
    NativeAudioEngineJNI.Phaser_process(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(sampleBuffer), isMonoSource);
  }

}
