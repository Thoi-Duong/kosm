/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class SequencerAPI {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected SequencerAPI(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SequencerAPI obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NativeAudioEngineJNI.delete_SequencerAPI(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public SequencerAPI() {
    this(NativeAudioEngineJNI.new_SequencerAPI(), true);
  }

  public void prepare(int aBufferSize, int aSampleRate, float aQueuedTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit) {
    NativeAudioEngineJNI.SequencerAPI_prepare(swigCPtr, this, aBufferSize, aSampleRate, aQueuedTempo, aTimeSigBeatAmount, aTimeSigBeatUnit);
  }

  public void setLoopPoint(int aStartPosition, int aEndPosition, int aStepsPerBar) {
    NativeAudioEngineJNI.SequencerAPI_setLoopPoint(swigCPtr, this, aStartPosition, aEndPosition, aStepsPerBar);
  }

  public void updateMeasures(int aAmount, int aStepsPerBar) {
    NativeAudioEngineJNI.SequencerAPI_updateMeasures(swigCPtr, this, aAmount, aStepsPerBar);
  }

  public void setTempo(float aTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit) {
    NativeAudioEngineJNI.SequencerAPI_setTempo(swigCPtr, this, aTempo, aTimeSigBeatAmount, aTimeSigBeatUnit);
  }

  public void setTempoNow(float aTempo, int aTimeSigBeatAmount, int aTimeSigBeatUnit) {
    NativeAudioEngineJNI.SequencerAPI_setTempoNow(swigCPtr, this, aTempo, aTimeSigBeatAmount, aTimeSigBeatUnit);
  }

  public void setVolume(float aVolume) {
    NativeAudioEngineJNI.SequencerAPI_setVolume(swigCPtr, this, aVolume);
  }

  public void setPlaying(boolean aPlaying) {
    NativeAudioEngineJNI.SequencerAPI_setPlaying(swigCPtr, this, aPlaying);
  }

  public void rewind() {
    NativeAudioEngineJNI.SequencerAPI_rewind(swigCPtr, this);
  }

  public BulkCacher getBulkCacher() {
    long cPtr = NativeAudioEngineJNI.SequencerAPI_getBulkCacher(swigCPtr, this);
    return (cPtr == 0) ? null : new BulkCacher(cPtr, false);
  }

  public void cacheAudioEventsForMeasure(int aMeasure) {
    NativeAudioEngineJNI.SequencerAPI_cacheAudioEventsForMeasure(swigCPtr, this, aMeasure);
  }

  public void setBounceState(boolean aIsBouncing, int aMaxBuffers, String aOutputDirectory) {
    NativeAudioEngineJNI.SequencerAPI_setBounceState(swigCPtr, this, aIsBouncing, aMaxBuffers, aOutputDirectory);
  }

  public void setRecordingState(boolean aRecording, int aMaxBuffers, String aOutputDirectory) {
    NativeAudioEngineJNI.SequencerAPI_setRecordingState(swigCPtr, this, aRecording, aMaxBuffers, aOutputDirectory);
  }

  public void setRecordingFromDeviceState(boolean aRecording, int aMaxBuffers, String aOutputDirectory) {
    NativeAudioEngineJNI.SequencerAPI_setRecordingFromDeviceState(swigCPtr, this, aRecording, aMaxBuffers, aOutputDirectory);
  }

}
