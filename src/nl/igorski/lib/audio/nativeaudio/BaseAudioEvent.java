/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class BaseAudioEvent {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected BaseAudioEvent(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BaseAudioEvent obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NativeAudioEngineJNI.delete_BaseAudioEvent(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public BaseAudioEvent() {
    this(NativeAudioEngineJNI.new_BaseAudioEvent(), true);
  }

  public void mixBuffer(SWIGTYPE_p_AudioBuffer outputBuffer, int bufferPos, int minBufferPosition, int maxBufferPosition, boolean loopStarted, int loopOffset, boolean useChannelRange) {
    NativeAudioEngineJNI.BaseAudioEvent_mixBuffer(swigCPtr, this, SWIGTYPE_p_AudioBuffer.getCPtr(outputBuffer), bufferPos, minBufferPosition, maxBufferPosition, loopStarted, loopOffset, useChannelRange);
  }

  public SWIGTYPE_p_AudioBuffer getBuffer() {
    long cPtr = NativeAudioEngineJNI.BaseAudioEvent_getBuffer(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AudioBuffer(cPtr, false);
  }

  public SWIGTYPE_p_AudioBuffer synthesize(int aBufferLength) {
    long cPtr = NativeAudioEngineJNI.BaseAudioEvent_synthesize(swigCPtr, this, aBufferLength);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AudioBuffer(cPtr, false);
  }

  public int getSampleLength() {
    return NativeAudioEngineJNI.BaseAudioEvent_getSampleLength(swigCPtr, this);
  }

  public int getSampleStart() {
    return NativeAudioEngineJNI.BaseAudioEvent_getSampleStart(swigCPtr, this);
  }

  public int getSampleEnd() {
    return NativeAudioEngineJNI.BaseAudioEvent_getSampleEnd(swigCPtr, this);
  }

  public void setSampleLength(int value) {
    NativeAudioEngineJNI.BaseAudioEvent_setSampleLength(swigCPtr, this, value);
  }

  public void setSampleStart(int value) {
    NativeAudioEngineJNI.BaseAudioEvent_setSampleStart(swigCPtr, this, value);
  }

  public void setSampleEnd(int value) {
    NativeAudioEngineJNI.BaseAudioEvent_setSampleEnd(swigCPtr, this, value);
  }

  public boolean getLoopeable() {
    return NativeAudioEngineJNI.BaseAudioEvent_getLoopeable(swigCPtr, this);
  }

  public void setLoopeable(boolean value) {
    NativeAudioEngineJNI.BaseAudioEvent_setLoopeable(swigCPtr, this, value);
  }

  public boolean deletable() {
    return NativeAudioEngineJNI.BaseAudioEvent_deletable(swigCPtr, this);
  }

  public void setDeletable(boolean value) {
    NativeAudioEngineJNI.BaseAudioEvent_setDeletable(swigCPtr, this, value);
  }

  public boolean isEnabled() {
    return NativeAudioEngineJNI.BaseAudioEvent_isEnabled(swigCPtr, this);
  }

  public void setEnabled(boolean value) {
    NativeAudioEngineJNI.BaseAudioEvent_setEnabled(swigCPtr, this, value);
  }

  public void lock() {
    NativeAudioEngineJNI.BaseAudioEvent_lock(swigCPtr, this);
  }

  public void unlock() {
    NativeAudioEngineJNI.BaseAudioEvent_unlock(swigCPtr, this);
  }

  public boolean isLocked() {
    return NativeAudioEngineJNI.BaseAudioEvent_isLocked(swigCPtr, this);
  }

  public void destroy() {
    NativeAudioEngineJNI.BaseAudioEvent_destroy(swigCPtr, this);
  }

}
