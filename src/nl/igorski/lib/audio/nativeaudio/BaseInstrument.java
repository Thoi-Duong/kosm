/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class BaseInstrument {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected BaseInstrument(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(BaseInstrument obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NativeAudioEngineJNI.delete_BaseInstrument(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public BaseInstrument() {
    this(NativeAudioEngineJNI.new_BaseInstrument(), true);
  }

  public boolean hasEvents() {
    return NativeAudioEngineJNI.BaseInstrument_hasEvents(swigCPtr, this);
  }

  public boolean hasLiveEvents() {
    return NativeAudioEngineJNI.BaseInstrument_hasLiveEvents(swigCPtr, this);
  }

  public void updateEvents() {
    NativeAudioEngineJNI.BaseInstrument_updateEvents(swigCPtr, this);
  }

  public SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t getEvents() {
    long cPtr = NativeAudioEngineJNI.BaseInstrument_getEvents(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t(cPtr, false);
  }

  public SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t getLiveEvents() {
    long cPtr = NativeAudioEngineJNI.BaseInstrument_getLiveEvents(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_std__vectorT_BaseAudioEvent_p_t(cPtr, false);
  }

  public void clearEvents() {
    NativeAudioEngineJNI.BaseInstrument_clearEvents(swigCPtr, this);
  }

  public boolean removeEvent(BaseAudioEvent aEvent) {
    return NativeAudioEngineJNI.BaseInstrument_removeEvent(swigCPtr, this, BaseAudioEvent.getCPtr(aEvent), aEvent);
  }

  public void registerInSequencer() {
    NativeAudioEngineJNI.BaseInstrument_registerInSequencer(swigCPtr, this);
  }

  public void unregisterFromSequencer() {
    NativeAudioEngineJNI.BaseInstrument_unregisterFromSequencer(swigCPtr, this);
  }

  public void setVolume(float value) {
    NativeAudioEngineJNI.BaseInstrument_volume_set(swigCPtr, this, value);
  }

  public float getVolume() {
    return NativeAudioEngineJNI.BaseInstrument_volume_get(swigCPtr, this);
  }

  public void setAudioChannel(AudioChannel value) {
    NativeAudioEngineJNI.BaseInstrument_audioChannel_set(swigCPtr, this, AudioChannel.getCPtr(value), value);
  }

  public AudioChannel getAudioChannel() {
    long cPtr = NativeAudioEngineJNI.BaseInstrument_audioChannel_get(swigCPtr, this);
    return (cPtr == 0) ? null : new AudioChannel(cPtr, false);
  }

}
