/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package nl.igorski.lib.audio.nativeaudio;

public class SampleManager {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected SampleManager(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(SampleManager obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        NativeAudioEngineJNI.delete_SampleManager(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static void setSample(SWIGTYPE_p_std__string aKey, SWIGTYPE_p_AudioBuffer aBuffer) {
    NativeAudioEngineJNI.SampleManager_setSample(SWIGTYPE_p_std__string.getCPtr(aKey), SWIGTYPE_p_AudioBuffer.getCPtr(aBuffer));
  }

  public static SWIGTYPE_p_AudioBuffer getSample(SWIGTYPE_p_std__string aIdentifier) {
    long cPtr = NativeAudioEngineJNI.SampleManager_getSample(SWIGTYPE_p_std__string.getCPtr(aIdentifier));
    return (cPtr == 0) ? null : new SWIGTYPE_p_AudioBuffer(cPtr, false);
  }

  public static int getSampleLength(SWIGTYPE_p_std__string aIdentifier) {
    return NativeAudioEngineJNI.SampleManager_getSampleLength(SWIGTYPE_p_std__string.getCPtr(aIdentifier));
  }

  public static boolean hasSample(SWIGTYPE_p_std__string aIdentifier) {
    return NativeAudioEngineJNI.SampleManager_hasSample(SWIGTYPE_p_std__string.getCPtr(aIdentifier));
  }

  public static void removeSample(SWIGTYPE_p_std__string aIdentifier) {
    NativeAudioEngineJNI.SampleManager_removeSample(SWIGTYPE_p_std__string.getCPtr(aIdentifier));
  }

  public static void flushSamples() {
    NativeAudioEngineJNI.SampleManager_flushSamples();
  }

  public SampleManager() {
    this(NativeAudioEngineJNI.new_SampleManager(), true);
  }

}
